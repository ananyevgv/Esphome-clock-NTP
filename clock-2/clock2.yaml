###################################################################
##                      WEMOS D1 ESP32                           ##
##  |GN|       |RS|          |#|     | 1|          |GN|          ##
##  |NC|       |36|          |#|     | 3|          |27| i2s_lrclk##
##  |39|       |26| clk      |#|     |22| scl      |25| i2s_dout ##
##  |35|       |18|          |#|     |21| sda      |32| i2s_bclk ##
##  |33|       |19| dio_1    |#|     |17|          |12| mute     ##
##  |34|       |23| dio_2    |#|     |16|          | 4|          ##
##  |14|       | 5|          |#|     |GN|          | 0|          ## 
##  |NC|       |3V|          |#|     |5V|          | 2|          ##
##  | 9|       |13|          |#|     |15|          | 8|          ##
##  |11|       |10|          |#|     | 7|          | 6|          ##
###################################################################

substitutions:
  name: bedroom
  device_description: "Часы спальня"

esphome:
  name: "${name}"
  comment: "${device_description}"
#esp8266:
#  board: d1_mini
esp32:
  board: wemos_d1_mini32
external_components:
  - source: github://ayufan/esphome-components

# Enable logging
logger:

# Enable Home Assistant API 
api:
  password: !secret api_pass
#Включаем загрузку по воздуху
ota:
  password: !secret ota_pass


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

memory:
  
sun:
  latitude: !secret latitude
  longitude: !secret longitude

i2c:
   sda: D2 #21
   scl: D1 #22
   scan: true
   id: bus_a   
bme680_bsec:  
  address: 0x77

i2s_audio:
  i2s_lrclk_pin: 27
  i2s_bclk_pin: 32
  id: clok
  
text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${name} IP Address"
      icon: mdi:ip
    ssid:
      name: "${name} SSID"
      icon: mdi:access-point-network
    mac_address:
      name: "${name} Mac"
      icon: mdi:lan

  - platform: bme680_bsec
    iaq_accuracy:
      name: "${name} IAQ Accuracy"

  - platform: template
    name: "${name} IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      uint16_t var = (id(iaq).state);
      switch (var) {
        case 0 ... 50: return std::string("Отлично");
        case 51 ... 100: return std::string("Хорошо");
        case 101 ... 150: return std::string("Слегка загрязненный");
        case 151 ... 200: return std::string("Умеренно загрязненный");
        case 201 ... 250: return std::string("Слегка загрязненный");
        case 251 ... 300: return std::string("Загрязненный");
        case 301 ... 350: return std::string("Сильно загрязненный");
        case 351 ... 500: return std::string("Черезвычайно загрязненный"); 
        default: return std::string("error");
      }

sensor:
  - platform: internal_temperature
    name: "${name} ESP32 T"
    
  - platform: bme680_bsec
    temperature:
      name: "${name} T"
      id: bedroom_t
      filters:
      - calibrate_linear:
        - 0.0 -> 0.0
        - 26.7 -> 24.7
    pressure:
      name: "${name} P"
    humidity:
      name: "${name} H"
      id: bedroom_h
      filters:
      - calibrate_linear:
        - 0.0 -> 0.0
        - 52 -> 54.7
    iaq:
      name: "${name} IAQ"
      id: iaq
    iaq_accuracy:
     name: "${name}  IAQ Accuracy"
    co2_equivalent:
      name: "${name} CO₂"
    breath_voc_equivalent:
      name: "${name} VOC"
    gas_resistance:
      #Gas resistance in Ω
      name: "${name}  Gas Resistance"
      filters:
        - median

  - platform: absolute_humidity
    name: "${name} Absolute Humidity"
    temperature: bedroom_t
    humidity: bedroom_h

  - platform: template
    name: "${name} brightness"
    id: brightness
    lambda: |-
      uint8_t var = (id(i_clock).state);
      switch (var) {
        case 0 : return 0; break;
        case 1 ... 3: return 1; break;
        case 4 ... 7: return 2; break;
        case 8 ... 11: return 3; break;
        case 12 ... 15: return 4; break;
        case 16 ... 19: return 5; break;
        case 20 ... 23: return 6; break;
        case 24 ... 100: return 7; break;
        default: return 0; break;
      }
    internal: true
    update_interval: 5s
    
  - platform: bh1750
    name: "${name} Illuminance"
    id: i_clock
    address: 0x23
    update_interval: 10s
    i2c_id: bus_a
     
  - platform: wifi_signal
    name: "${name} Wifi"
    update_interval: 60s  
    id: wifi_signal_db
    entity_category: "diagnostic"
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${name} WiFi Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    
  - platform: sun
    name: "${name} Elevation"
    type: elevation
    id: elevation
    internal: true
    
  - platform: esp32_hall
    name: "${name} hall Sensor"
    update_interval: 60s

button:
  - platform: restart
    name: "${name} restart"
    
display:
  - platform: tm1637
    id: tm1637_c
    clk_pin: 
      number: D0 #26
      allow_other_uses: true
    dio_pin: D6 #19
    update_interval: 500ms
    lambda: |-
      it.set_intensity(static_cast<int>(id(brightness).state));
      static int i = 0;
      i++;
      if ((i % 2) == 0)
        it.strftime("%H.%M", id(sntp_time).now());
      else
        it.strftime("%H%M", id(sntp_time).now()); 
      it.printf(4,"%.0f." , id(bedroom_h).state);
      
  - platform: tm1637
    id: tm1637_t
    clk_pin: 
      number: D0 #26
      allow_other_uses: true
    dio_pin: D7 #23
    update_interval: 500ms
    lambda: |-
      it.set_intensity(static_cast<int>(id(brightness).state));
      it.printf( "%0.0f.c" , id(bedroom_t).state);
      if ((id(elevation).state) > 0)
        it.printf(3,"~");
#      else
#        it.printf(3,"_");       
media_player:
  - platform: i2s_audio
    name: "${name}"
    dac_type: external
   # disabled_by_default: False
    i2s_dout_pin: 25
    mode: mono
    i2s_audio_id: clok
    i2s_comm_fmt: MSB

   # mute_pin:
     # number: 12 # GAIN Connected to VDD 100kΩ resistor 3db(6db VDD) Connected to GND 100kΩ resistor 15db (12db GND)
      #inverted: true

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow
    servers: !secret sntp
