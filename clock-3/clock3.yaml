substitutions:
  devicename: "kitchen"
  upper_devicename: kitchen


esphome:
  name: "${devicename}"
esp8266:
  board: d1_mini


# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret api_pass
#Включаем загрузку по воздуху
ota:
  password: !secret ota_pass

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "${devicename} Fallback"
#    password: !secret back_pass

#captive_portal:

i2c:
   sda: D2
   scl: D1
   scan: true

spi:
  clk_pin: D0
  mosi_pin: D6
  
dallas:
  - pin: D3
remote_transmitter:
  pin: D5
  carrier_duty_percent: 50%

 
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${upper_devicename} IP Address
      icon: mdi:ip
    ssid:
      name: ${upper_devicename} SSID
      icon: mdi:access-point-network
    mac_address:
      name: ${upper_devicename} Mac
      icon: mdi:lan

sensor:
  - platform: dallas
    index: 0
    name: ${upper_devicename} pol_t
    id: t_pol_k
#    filters:
#    - calibrate_linear:
#      - 0.0 -> 0.0
#      - 25.0 -> 24.0

  - platform: aht10
    temperature:
      name: "${upper_devicename} T"
      id: kitchen_t
#      filters:
#        - calibrate_linear:
#          - 0.0 -> 0.0
#          - 28.0 -> 23.7
    humidity:
      name: "${upper_devicename} humidity"
      id: kitchen_h
#      filters:
#        - calibrate_linear:
#          - 0.0 -> 0.0
#          - 36.0 -> 42
    update_interval: 60s
    address: 0x38
  
  - platform: template
    name: "${upper_devicename} brightness"
    id: brightness
    lambda: |-
      if (id(i_clock).state > 15) {
        return 7;
      } else {
       if (id(i_clock).state > 10) {
        return 6;
      } else {
       if (id(i_clock).state > 8) {
        return 5;
      } else {
       if (id(i_clock).state > 6) {
        return 15;
      } else {  
       if (id(i_clock).state > 4) {
        return 3;
      } else {
       if (id(i_clock).state > 2) {
        return 2;
      } else {
      if (id(i_clock).state > 1) {
        return 1;
      } else {
       return 0 ;}}}}}}}
    update_interval: 5s
    
  - platform: bh1750
    name: "${upper_devicename} Illuminance"
    id: i_clock
    address: 0x23
    update_interval: 10s
      
  - platform: wifi_signal
    name: ${upper_devicename} Wifi
    update_interval: 60s


  - platform: pulse_meter
    pin: D7
    unit_of_measurement: 'l/min'
    name: "${devicename} l/min"
    id: potok
#    internal_filter: 3ms
    accuracy_decimals: 2
    timeout: 5s
    filters:
      - multiply: 0.0005
    total:
      name: "drink_water_filter"
      id: drink_water_filter
      unit_of_measurement: "L"
      device_class: water
      accuracy_decimals: 3
      filters:
        - multiply: 0.0005

  - platform: homeassistant
    name: "water_total"
    entity_id: sensor.drink_water_yearly_single
    id: drink_water_yearly

switch:
  - platform: template
    name: ${upper_devicename} Power LG
    icon: "mdi:television"
    turn_on_action:
      - remote_transmitter.transmit_lg:
         data: 0x20DF10EF # power on/off
         nbits: 32

display:
  - platform: max7219
    cs_pin: D4
    num_chips: 3
    lambda: |-
      it.set_intensity(static_cast<int>(id(brightness).state));
      static int i = 0;
      i++;
        it.strftime(14,"%S", id(sntp_time).now());
        it.printf(16,"%.1fc" , id(kitchen_t).state);
        it.printf(20,"%.1fh" , id(kitchen_h).state);

        if ((id(drink_water_yearly).state) > 10000)
          it.printf(8,"ErrorF");
        else 
          it.printf(8,"%.1fL" , id(drink_water_yearly).state);
        if ((i % 2) == 0) 
          it.strftime(0,"%H.%M", id(sntp_time).now());
        else 
          it.strftime(0,"%H%M", id(sntp_time).now()); 


      

# Sync time with Home Assistant.
time:
  - platform: sntp
    id: sntp_time
    timezone: UTC-3
    servers: !secret sntp
