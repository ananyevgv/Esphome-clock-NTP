substitutions:
  devicename: "kitchen"
  upper_devicename: kitchen

esphome:
  name: "${devicename}"
esp8266:
  board: d1_mini

external_components:
  source: github://khenderick/esphome-opentherm
  components: [opentherm]
opentherm:
  read_pin: 3
  write_pin: 1
# Enable logging
logger:
   baud_rate: 0
   
api:
  password: !secret api_pass
#Включаем загрузку по воздуху
ota:
  password: !secret ota_pass

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

i2c:
   sda: D2
   scl: D1
   scan: true

spi:
  clk_pin: D0
  mosi_pin: D6
  
dallas:
  - pin: D3

remote_transmitter:
  pin: D5
  carrier_duty_percent: 50%

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${upper_devicename} IP Address
      icon: mdi:ip
    ssid:
      name: ${upper_devicename} SSID
      icon: mdi:access-point-network
    mac_address:
      name: ${upper_devicename} Mac
      icon: mdi:lan

  - platform: template
    name: "Ошибка котла"
    icon: mdi:water-boiler-alert
    lambda: |-
      uint8_t var = (id(oem_error).state);
      switch (var) {
        case 0: return std::string("Ошибок нет");
        case 1: return std::string("E01 Блокировка розжига");
        case 2: return std::string("E02 Вмешательство защитного термостата");
        case 3: return std::string("E03 Вмешательство датчика тяги (пневмореле) / термостата");
        case 5: return std::string("E05 Неисправность датчика NTC подачи отопления");
        case 6: return std::string("E06 Неисправность датчика контура ГВС");
        case 10: return std::string("E10 Отсутствует разрешение от гидравлического прессостата");
        case 11: return std::string("E11 Неисправность открытия входа внешнего программируемого датчика температуры (= 04)");
        case 12: return std::string("E12 Нет разрешения от дифференциального датчика гидравлического давления (прессостата)");
        case 13: return std::string("E13 Залипание контактов дифференциального гидравлического прессостата");
        case 18: return std::string("E18 Включено заполнение системы (замечание)");
        case 19: return std::string("E19 Неисправность при заполнения системы");
        case 25: return std::string("E25 Вмешательство защиты из-за отсутствия циркуляции воды");
        case 35: return std::string("E35 Паразитное пламя (ошибка пламени)");
        case 98: return std::string("E98 ВПроблема с контактами реле газового клапана, внутренняя ошибка");
        case 99: return std::string("E99 Проблема котактов реле, внутренняя ошибка");
        default: return std::string("Неизвестная ошибка");
      } 

sensor:
  - platform: opentherm
    ch_min_temperature:
      name: "CH minimum temperature"
    ch_max_temperature:
      name: "CH maximum temperature"
    dhw_min_temperature:
      name: "DHW minimum temperature"
    dhw_max_temperature:
      name: "DHW maximum temperature"
    modulation:
      name: "modulation"
    dhw_temperature:
      name: "DHW temperature"
    boiler_temperature:
      name: "boiler temperature"
    outside_temperature:
      name: "outside temperature"
      icon: mdi:home-thermometer-outline
    oem_error_code:
      name: "OEM error code"
      id: oem_error
      icon: mdi:water-boiler-alert
  - platform: dallas
    index: 0
    name: ${upper_devicename} pol_t
    id: t_pol_k
#    filters:
#    - calibrate_linear:
#      - 0.0 -> 0.0
#      - 25.0 -> 24.0

  - platform: aht10
    temperature:
      name: "${upper_devicename} T"
      id: kitchen_t
#      filters:
#        - calibrate_linear:
#          - 0.0 -> 0.0
#          - 28.0 -> 23.7
    humidity:
      name: "${upper_devicename} humidity"
      id: kitchen_h
#      filters:
#        - calibrate_linear:
#          - 0.0 -> 0.0
#          - 36.0 -> 42
    update_interval: 60s
    address: 0x38

  - platform: absolute_humidity
    name: "${upper_devicename} Absolute Humidity"
    temperature: kitchen_t
    humidity: kitchen_h

  - platform: template
    name: "${upper_devicename} brightness"
    id: brightness
    lambda: |-
      uint8_t var = (id(i_clock).state);
      switch (var) {
        case 0: return 0; break;
        case 1: return 1; break;
        case 2: return 2; break;
        case 3: return 3; break;
        case 4: return 4; break;
        case 5: return 5; break;
        case 6: return 6; break;
        case 7: return 7; break;
        case 8: return 8; break;
        case 9: return 9; break;
        case 10: return 10; break;
        case 11: return 11; break;
        case 12: return 12; break;
        case 13: return 13; break;
        case 14: return 14; break;
        case 15 ... 100: return 15; break;
        default: return 15; break;
      }
    update_interval: 5s
    
  - platform: bh1750
    name: "${upper_devicename} Illuminance"
    id: i_clock
    address: 0x23
    update_interval: 10s
      
  - platform: wifi_signal
    name: ${upper_devicename} Wifi
    update_interval: 60s  
    id: wifi_signal_db
    entity_category: "diagnostic"
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: ${upper_devicename} WiFi Percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

  - platform: pulse_meter
    pin: D7
    unit_of_measurement: 'l/min'
    name: "${devicename} l/min"
    id: potok
  #  internal_filter: 10ms
    accuracy_decimals: 1
    timeout: 5s
    filters:
      - multiply: 0.0005
    total:
      name: "drink_water_filter"
      id: drink_water_filter
      unit_of_measurement: "L"
      device_class: water
      accuracy_decimals: 1
      filters:
        - multiply: 0.0005

  - platform: homeassistant
    name: "water_total"
    entity_id: sensor.drink_water_yearly
    id: drink_water_yearly

  - platform: homeassistant
    name: "timer"
    entity_id: timer.timer
    attribute: remaining
    id: timer

binary_sensor:
  - platform: opentherm
    ch_active:
      name: "CH active"
      icon: mdi:radiator
    ch_2_active:
      name: "ECO"
      icon: mdi:sprout
    dhw_active:
      name: "DHW active"
      icon: mdi:water-boiler
    flame_active:
      name: "flame active"
      icon: mdi:fire
    fault:
      name: "fault"
      icon: mdi:water-boiler-alert
    diagnostic:
      name: "diagnostic"
      icon: mdi:face-agent
    service_request:
      name: "service request"
      icon: mdi:account-wrench
    lockout_reset:
      name: "lockout reset"
      icon: mdi:lock-reset
    water_pressure_fault:
      name: "water pressure fault"
      icon: mdi:gauge-empty
    gas_flame_fault:
      name: "gas/flame fault"
      icon: mdi:gas-burner
    air_pressure_fault:
      name: "air pressure fault"
      icon: mdi:cloud-alert-outline
    water_over_temperature_fault:
      name: "water over temperature fault"
      icon: mdi:coolant-temperature

switch:
  - platform: opentherm
    ch_enabled:
      name: "CH enabled"
      icon: mdi:radiator
    ch_2_enabled:
      name: "ECO enabled"
      icon: mdi:sprout
    dhw_enabled:
      name: "DHW enabled"
      icon: mdi:water-boiler
  - platform: restart
    name: "${devicename} Restart"

  - platform: template
    name: ${upper_devicename} Power LG
    icon: "hue:wall-flood"
    turn_on_action:
      - remote_transmitter.transmit_lg:
         data: 0x20DF10EF # power on/off
         nbits: 32

display:
  - platform: max7219
    cs_pin: D4
    num_chips: 3
    lambda: |-
      it.set_intensity(static_cast<int>(id(brightness).state));
      static int i = 0;
      i++;
        it.strftime(14,"%S", id(sntp_time).now());
        it.printf(16,"%.1fc" , id(kitchen_t).state);
        it.printf(20,"%.1fh" , id(kitchen_h).state);

        if ((id(drink_water_yearly).state) > 10000)
          it.printf(8,"ErrorF");
        else 
          it.printf(8,"%.1fL" , id(drink_water_yearly).state);
 
        if ((i % 2) == 0) 
          it.strftime(0,"%H.%M", id(sntp_time).now());
        else 
          it.strftime(0,"%H%M", id(sntp_time).now()); 
          
number:
  - platform: opentherm
    ch_setpoint_temperature:
      name: "CH setpoint temperature"
      min_value: 10.0
      max_value: 85.0
      step: 1
      restore_value: true

    dhw_setpoint_temperature:
      name: "DHW setpoint temperature"
      min_value: 35.0
      max_value: 60.0
      step: 1
      restore_value: true

time:
  - platform: sntp
    id: sntp_time
    timezone: UTC-3
    servers: !secret sntp

web_server:
  port: 80
  auth:
    username: !secret web_user
    password: !secret web_pass  
